/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "communicate.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

int *
post_1(char *arg1,  CLIENT *clnt)
{
	static int clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, POST,
				   (xdrproc_t) xdr_wrapstring, (caddr_t) &arg1,
				   (xdrproc_t) xdr_int, (caddr_t) &clnt_res,
				   TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

char **
read_1(CLIENT *clnt)
{
	static char *clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, READ, (xdrproc_t) xdr_void, (caddr_t) NULL,
				   (xdrproc_t) xdr_wrapstring, (caddr_t) &clnt_res,
				   TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

ArticleContent *
choose_1(int arg1,  CLIENT *clnt)
{
	static ArticleContent clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, CHOOSE,
				   (xdrproc_t) xdr_int, (caddr_t) &arg1,
				   (xdrproc_t) xdr_ArticleContent, (caddr_t) &clnt_res,
				   TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

int *
reply_1(char *arg1, int arg2,  CLIENT *clnt)
{
	reply_1_argument arg;
	static int clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	arg.arg1 = arg1;
	arg.arg2 = arg2;
	if (clnt_call (clnt, REPLY, (xdrproc_t) xdr_reply_1_argument, (caddr_t) &arg,
				   (xdrproc_t) xdr_int, (caddr_t) &clnt_res,
				   TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

server_list *
get_server_list_1(CLIENT *clnt)
{
	static server_list clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, GET_SERVER_LIST, (xdrproc_t) xdr_void, (caddr_t) NULL,
				   (xdrproc_t) xdr_server_list, (caddr_t) &clnt_res,
				   TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
