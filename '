#include <iostream>
#include <map>
#include <vector>
#include "article.h"
#include "peer_server.h"
using namespace std;


static map<string, PeerServer*> simulateRPC;
 
PeerServer::PeerServer(string ip) {
    this->ip = ip;
    serverList.insert(ip);
    coordinator_ip = ip;

    //for simulating rpc
    simulateRPC[ip] = this;
}

PeerServer::PeerServer(string coordinator_ip, string ip) {
    this->ip = ip;
    this->coordinator_ip = coordinator_ip;
    PeerServer *coordinator = simulateRPC.find(coordinator_ip)->second;
    coordinator->joinNewServer(ip, this);
    serverList = coordinator->getServerList(); 
}

void PeerServer::chooseNewCoordinator() {
    //TODO
    simulateRPC.erase(simulateRPC.find(coordinator_ip));
    vector<string> goesDown;
    //mark servers that goes down
    //delete coordinator_ip from every existing servers
    for (int i = 0; i < serverList.size(); i++) {
        auto now = simulateRPC.find(serverList[i]);
        if (now != simulateRPC.end()) {
            now->second->deleteServer(coordinator_ip); 
        } else {
            goesDown.push_back(serverList[i]);
        }
    }
    //for (int i = 0; i < serverList.size(); i++) {
    //    auto now = simulateRPC.find(serverList[i]);
    //    if (now != simulateRPC.end()) {
    //        for (int j = 0; j < goesDown.size(); j++) {
    //            now->second->deleteServer(goesDown[j]); 
    //        }
    //    }
    //}
    auto it = serverList.begin();
    coordinator_ip = *it;
}

void PeerServer::printPeerServerList() {
    for (auto it = serverList.begin(); it != serverList.end(); it++) {
        cout << *it << " ";
    }
    cout << endl << endl;
}

void PeerServer::printData() {
    cout << "Print data from server (" << ip << " "  << ")" << endl;
    cout << articlePool.read();
}

//notify all servers if it's coordinator
//if it's a normal server: notify coordinator
void PeerServer::notifyDataChange() {
    if (coordinator_ip == ip) { 
        notifyAllPeerServer(articlePool);
    } else {
        updateCoordinatorData(articlePool);
    }
}

//this is a coordinator function: it will get data from other server
void PeerServer::updateFromOtherServer(ArticlePool newData) {
    articlePool = newData;
    notifyDataChange();
}

//notify coordinator to change data
void PeerServer::updateCoordinatorData(ArticlePool newData) {
    //To Do:
    //Find the coordinator based on coordinator ip and port
    PeerServer * c = simulateRPC.find(coordinator_ip)->second;
    c->updateFromOtherServer(newData);
}

void PeerServer::notifyAllPeerServer(ArticlePool newData) {
    //To Do:
    //Find all server based on (ip, port) map
    vector<string> goesDown;
    for (auto it = serverList.begin(); it != serverList.end(); it++) { 
        auto now = simulateRPC.find(*it);
        //there's a server goes down
        if (now == simulateRPC.end()) {
            goesDown.push_back(*it);
        //the server doesn't down
        } else {
            auto p = now->second;
            if (p->ip != coordinator_ip) {
                p->updateFromCoordinator(newData);
            }
        }
    }
    for (int i = 0; i < goesDown.size(); i++) {
        serverList.erase(serverList.find(goesDown[i]));
    }
    for (auto it = serverList.begin(); it != serverList.end(); it++) {
        auto now = simulateRPC.find(*it);
    }
}

set<string> PeerServer::getServerList() {
    return serverList;
}

void PeerServer::updateFromCoordinator(ArticlePool newData) {
    articlePool = newData;
}

Article* PeerServer::choose(int index) {
    return articlePool.choose(index);
}

void PeerServer::joinNewServer(string ip, PeerServer *p) {
    simulateRPC[ip] = p;
    joinServer(ip);
}

void PeerServer::joinServer(string ip) {
    serverList.insert(ip); 
}

void PeerServer::deleteServer(string ip) {
    if (serverList.find(ip) == serverList.end()) {
        cout << "Erase server " << ip << " fails" << endl;
    } else {
        serverList.erase(serverList.find(ip));
    }
}

int PeerServer::reply(string article, int index) {
    PeerServer *coordinator = simulateRPC.find(coordinator_ip)->second;
    articlePool = coordinator->deepCopy();
    if (articlePool.reply(article, index)) {
        notifyDataChange();
    }
}

int PeerServer::post(string article) {
    PeerServer *coordinator = simulateRPC.find(coordinator_ip)->second;
    articlePool = coordinator->deepCopy();
    if (articlePool.post(article)) {
        notifyDataChange();
    }
}

ArticlePool PeerServer::deepCopy() {
    return articlePool.deepCopy();
}

string PeerServer::read() {
    return articlePool.read();
}

int PeerServer::getTimeStamp() {
    return timeStamp;
}


int main() {
    //ArticlePool articlePool;
    ////------------test article pool-----/
    cout << "Initialize coordinator" << endl;
    PeerServer coordinator("183.0.0.1");
    cout << "Print PeerServer List from coordinator:" << endl;
    coordinator.printPeerServerList();
    coordinator.post("article 1");
    cout << coordinator.read() << endl;

    //ArticlePool newPool2 = articlePool.deepCopy();
    //articlePool.post("Article 1");
    //cout << articlePool.read() << endl;
    //int id1 = articlePool.post("Article 2");
    //cout << articlePool.read() << endl;
    //articlePool.reply("A reply for Article 2", id1);
    //cout << articlePool.read() << endl;
    //int id2 = articlePool.reply("A reply for Article 2", id1);
    //cout << articlePool.read() << endl;
    //articlePool.reply("A reply for Article 4", id2);
    //cout << articlePool.read() << endl;
    //cout << "--------tests for single choose-----" << endl;
    //Article * now = articlePool.choose(id1);
    //if (now != NULL) 
    //cout << now->index << " " << now->content << endl;
    //now = articlePool.choose(id2);
    //if (now != NULL) 
    //cout << now->index << " " << now->content << endl;
    //now = articlePool.choose(6);
    //ArticlePool newPool = articlePool.deepCopy();
    //newPool.post("newnewnew");
    //cout << articlePool.read() << endl;
    //cout << newPool.read() << endl;

    cout << "Initialize second server" << endl;
    PeerServer secondPeerServer("183.0.0.1", "183.0.0.2");
    PeerServer thirdPeerServer("183.0.0.1", "183.0.0.3");
    cout << "Print PeerServer List from second server:" << endl;
    secondPeerServer.printPeerServerList();
    cout << "Print PeerServer List from coordinator:" << endl;
    coordinator.printPeerServerList();
    thirdPeerServer.post("article 2");
    thirdPeerServer.printData();
    secondPeerServer.reply("article 3", 2);
    thirdPeerServer.printData();
    ////cout << "Remove coordinator and choose new coordinator:" << endl;
    ////secondPeerServer.chooseNewCoordinator();
    //coordinator.printPeerServerList();
    //cout << "Update server (3,3) with new data: article 1" << endl;
    //thirdPeerServer.post("article 1");
    //thirdPeerServer.printData();
    //coordinator.printData();
    //secondPeerServer.printData();
    return 0;
}
